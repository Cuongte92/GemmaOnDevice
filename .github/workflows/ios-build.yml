name: iOS Build

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/ios-build.yml"
      - "mediapipe-samples/examples/llm_inference/ios/**"

jobs:
  build:
    runs-on: macos-14

    env:
      WORKING_DIR: mediapipe-samples/examples/llm_inference/ios
      SCHEME: LLMInferenceExample
      WORKSPACE: mediapipe-samples/examples/llm_inference/ios/LLMInferenceExample.xcworkspace
      ARCHIVE_PATH: build/LLMInferenceExample.xcarchive

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Xcode version
        run: xcodebuild -version

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods --no-document
          pod --version
          pod install --project-directory="${WORKING_DIR}"

      # --- Signing files from secrets (replace in repo settings) ---
      # IOS_P12_BASE64, IOS_P12_PASSWORD, IOS_PROVISION_PROFILE_BASE64,
      # IOS_BUNDLE_ID, IOS_TEAM_ID
      - name: Decode signing files
        run: |
          echo "${{ secrets.IOS_P12_BASE64 }}" | base64 --decode > signing.p12
          echo "${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}" | base64 --decode > profile.mobileprovision

      - name: Setup keychain
        run: |
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import signing.p12 -k build.keychain -P "${{ secrets.IOS_P12_PASSWORD }}" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

      - name: Install provisioning profile
        id: install_profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          /usr/bin/security cms -D -i profile.mobileprovision > profile.plist
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)
          NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' profile.plist)
          echo "UUID=$UUID" >> $GITHUB_OUTPUT
          echo "NAME=$NAME" >> $GITHUB_OUTPUT
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision

- name: Archive
  env:
    # b    SCHEME: InferenceExample
    CONFIGURATION: Release
    ARCHIVE_PATH: ${{ runner.temp }}/build/App.xcarchive
  run: |
    set -euo pipefail

    if [ ! -e "${PROJECT_PATH}" ]; then
      echo "build PROJECT_PATH='${PROJECT_PATH}' not found"; exit 66
    fi

    # Na:?u lC  .xcodeproj thC, dC9ng -project, na:?u lC  .xcworkspace thC, dC9ng -workspace
    if [[ "${PROJECT_PATH}" == *.xcworkspace ]]; then
      xcodebuild \
        -workspace "${PROJECT_PATH}" \
        -scheme "${SCHEME}" \
        -configuration "${CONFIGURATION}" \
        -sdk iphoneos \
        -destination 'generic/platform=iOS' \
        -archivePath "${ARCHIVE_PATH}" \
        clean archive | xcpretty
    else
      xcodebuild \
        -project "${PROJECT_PATH}" \
        -scheme "${SCHEME}" \
        -configuration "${CONFIGURATION}" \
        -sdk iphoneos \
        -destination 'generic/platform=iOS' \
        -archivePath "${ARCHIVE_PATH}" \
        clean archive | xcpretty
    fi

    xcodebuild \
      -workspace "${PROJECT_PATH}" \
      -scheme "${SCHEME}" \
      -configuration "${CONFIGURATION}" \
      -sdk iphoneos \
      -destination generic/platform=iOS \
      -archivePath "${ARCHIVE_PATH}" \
      clean archive | xcpretty

      - name: Create export options
        run: |
          cat > exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>ad-hoc</string>
            <key>teamID</key><string>${{ secrets.IOS_TEAM_ID }}</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${{ secrets.IOS_BUNDLE_ID }}</key>
              <string>${{ steps.install_profile.outputs.NAME }}</string>
            </dict>
            <key>compileBitcode</key><false/>
            <key>stripSwiftSymbols</key><true/>
          </dict>
          </plist>
          EOF

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportPath build \
            -exportOptionsPlist exportOptions.plist | xcpretty
          ls -la build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ipa
          path: build/*.ipa
